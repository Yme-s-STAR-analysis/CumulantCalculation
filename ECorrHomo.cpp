// Zhang Yu -- Dec 2020
// Yige Huang revision June 3 2024
// For 4th order, 16.09.2024
#include "TProfile.h"
#include "TH1D.h"
#include "TFile.h"
#include "TGraphErrors.h"
#include <fstream>
#include <stdlib.h>
#include "TRandom3.h"
#include <sys/mman.h>
#include <sys/types.h>
#include <unistd.h>
#include <stdio.h>
#include <fcntl.h>
#include <time.h>
#include <cmath>
#include "TKey.h"
#include <map>
#include "TMath.h"
#include "TString.h"
#include "ECorrHomo.h"
#include <iostream>

using std::pow;
using std::sqrt;

ECorr::ECorr(const char* type, int MaxMult, int lowCut) : ParticleType(type), _nMultBin(MaxMult+1), LowEventCut(lowCut) {
	std::cout << "[LOG] ECorr: Construction" << std::endl;
}

ECorr::~ECorr() {}

void ECorr::Init() {

  	hEntries = new TH1D(Form("%shEntries", ParticleType),";Mult;Counts", _nMultBin, -0.5, _nMultBin-0.5);
	_sk1 = new TH1D(Form("%sk1" ,ParticleType),";Mult;#kappa_{1}", _nMultBin, -0.5, _nMultBin-0.5);
	_sk2 = new TH1D(Form("%sk2" ,ParticleType),";Mult;#kappa_{2}", _nMultBin, -0.5, _nMultBin-0.5);
	_sk3 = new TH1D(Form("%sk3" ,ParticleType),";Mult;#kappa_{3}", _nMultBin, -0.5, _nMultBin-0.5);
	_sk21 = new TH1D(Form("%sk21" ,ParticleType),";Mult;#kappa_{2}/#kappa_{1}", _nMultBin, -0.5, _nMultBin-0.5);
	_sk31 = new TH1D(Form("%sk31" ,ParticleType),";Mult;#kappa_{3}/#kappa_{1}", _nMultBin, -0.5, _nMultBin-0.5);
	_sk2n = new TH1D(Form("%sk2n" ,ParticleType),";Mult;#kappa_{2}/#kappa_{1}^2", _nMultBin, -0.5, _nMultBin-0.5);
	_sk3n = new TH1D(Form("%sk3n" ,ParticleType),";Mult;#kappa_{3}/#kappa_{1}^3", _nMultBin, -0.5, _nMultBin-0.5);

}

void ECorr::Calculate() {
	Double_t tc1, tc2, tc3;
	Double_t tk1, tk2, tk3;
	Double_t ek1, ek2, ek3;
	Double_t ek21, ek31;
	Double_t ek2n, ek3n;
	Double_t v[_nTerms+1] = { 0.0 };
	for(int iBin=1; iBin<=_nMultBin; ++iBin) {
		tc1 = tc2 = tc3 = 0; 
		tk1 = tk2 = tk3 = 0; 
		ek1 = ek2 = ek3 = 0; 
		ek21 = ek31 = 0;
		ek2n = ek3n = 0;
		int BinEntries = _V[1]->GetBinEntries(iBin);
		// if(BinEntries < LowEventCut) { continue; }
		for(int i=1; i<= _nTerms; ++i) {
			v[i] = _V[i]->GetBinContent(iBin);
		}
		//==== Formula Tag: C1
			tc1 = v[39];
		//==== Formula Tag: C2
			tc2 = -pow(v[39], 2) + v[53] + v[10] - v[51];
		//==== Formula Tag: C3
			tc3 = 2*pow(v[39], 3) - 3*v[39]*v[53] - 3*v[39]*v[10] + 3*v[39]*v[51] + v[6] + 3*v[21] - 3*v[41] + v[13] - 3*v[37] + 2*v[15];

		// Formula Tag: kappa
		//==== Formula Tag: k1->k3
			tk1 = tc1;
			tk2 = tc2 - tc1;
			tk3 = tc3 - 3*tc2 + 2*tc1;

		//==== Formula Tag: k1 error
			ek1 = sqrt(fabs(tc2));
		//==== Formula Tag: k2 error
			ek2 = sqrt(fabs(-4*pow(v[39], 4) - 4*pow(v[39], 3) + 8*pow(v[39], 2)*v[53] + 4*pow(v[39], 2)*v[10] - 4*pow(v[39], 2)*v[51] - pow(v[39], 2) + 6*v[39]*v[53] - 4*v[39]*v[6] - 4*v[39]*v[21] + 4*v[39]*v[41] + 2*v[39]*v[10] - 2*v[39]*v[51] - pow(v[53], 2) - 2*v[53]*v[10] + 2*v[53]*v[51] + v[53] + 2*v[54] - 2*v[26] - 2*v[6] + v[23] - 2*v[21] + 2*v[41] - pow(v[10], 2) + 2*v[10]*v[51] + v[35] - 2*v[32] - pow(v[51], 2) + v[45]) / BinEntries);
		//==== Formula Tag: k3 error
			ek3 = sqrt(fabs(-36*pow(v[39], 6) - 72*pow(v[39], 5) + 108*pow(v[39], 4)*v[53] + 72*pow(v[39], 4)*v[10] - 72*pow(v[39], 4)*v[51] - 60*pow(v[39], 4) + 180*pow(v[39], 3)*v[53] - 48*pow(v[39], 3)*v[6] - 72*pow(v[39], 3)*v[21] + 72*pow(v[39], 3)*v[41] + 108*pow(v[39], 3)*v[10] - 108*pow(v[39], 3)*v[51] - 12*pow(v[39], 3)*v[13] + 36*pow(v[39], 3)*v[37] - 24*pow(v[39], 3)*v[15] - 24*pow(v[39], 3) - 72*pow(v[39], 2)*pow(v[53], 2) - 108*pow(v[39], 2)*v[53]*v[10] + 108*pow(v[39], 2)*v[53]*v[51] + 120*pow(v[39], 2)*v[53] + 54*pow(v[39], 2)*v[54] - 54*pow(v[39], 2)*v[26] - 84*pow(v[39], 2)*v[6] + 21*pow(v[39], 2)*v[23] - 108*pow(v[39], 2)*v[21] + 108*pow(v[39], 2)*v[41] + 12*pow(v[39], 2)*v[31] - 36*pow(v[39], 2)*v[30] + 24*pow(v[39], 2)*v[1] - 36*pow(v[39], 2)*pow(v[10], 2) + 72*pow(v[39], 2)*v[10]*v[51] + 60*pow(v[39], 2)*v[10] + 9*pow(v[39], 2)*v[35] - 18*pow(v[39], 2)*v[32] - 36*pow(v[39], 2)*pow(v[51], 2) - 60*pow(v[39], 2)*v[51] + 9*pow(v[39], 2)*v[45] - 12*pow(v[39], 2)*v[13] + 36*pow(v[39], 2)*v[37] - 24*pow(v[39], 2)*v[15] - 4*pow(v[39], 2) - 72*v[39]*pow(v[53], 2) + 30*v[39]*v[53]*v[6] + 54*v[39]*v[53]*v[21] - 54*v[39]*v[53]*v[41] - 108*v[39]*v[53]*v[10] + 108*v[39]*v[53]*v[51] + 12*v[39]*v[53]*v[13] - 36*v[39]*v[53]*v[37] + 24*v[39]*v[53]*v[15] + 36*v[39]*v[53] + 72*v[39]*v[54] - 72*v[39]*v[26] - 6*v[39]*v[9] + 18*v[39]*v[18] - 12*v[39]*v[50] + 30*v[39]*v[6]*v[10] - 30*v[39]*v[6]*v[51] - 52*v[39]*v[6] - 24*v[39]*v[40] + 24*v[39]*v[12] + 30*v[39]*v[23] - 6*v[39]*v[27] + 54*v[39]*v[21]*v[10] - 54*v[39]*v[21]*v[51] - 60*v[39]*v[21] - 18*v[39]*v[8] + 36*v[39]*v[36] - 54*v[39]*v[41]*v[10] + 54*v[39]*v[41]*v[51] + 60*v[39]*v[41] - 18*v[39]*v[28] + 12*v[39]*v[31] - 36*v[39]*v[30] + 24*v[39]*v[1] - 36*v[39]*pow(v[10], 2) + 72*v[39]*v[10]*v[51] + 12*v[39]*v[10]*v[13] - 36*v[39]*v[10]*v[37] + 24*v[39]*v[10]*v[15] + 12*v[39]*v[10] + 18*v[39]*v[35] - 36*v[39]*v[32] - 6*v[39]*v[4] + 18*v[39]*v[22] - 12*v[39]*v[17] - 36*v[39]*pow(v[51], 2) - 12*v[39]*v[51]*v[13] + 36*v[39]*v[51]*v[37] - 24*v[39]*v[51]*v[15] - 12*v[39]*v[51] + 18*v[39]*v[45] + 6*v[39]*v[42] - 18*v[39]*v[11] + 12*v[39]*v[49] - 4*v[39]*v[13] + 12*v[39]*v[37] - 8*v[39]*v[15] + 9*pow(v[53], 3) + 18*pow(v[53], 2)*v[10] - 18*pow(v[53], 2)*v[51] - 21*pow(v[53], 2) - 18*v[53]*v[54] + 18*v[53]*v[26] + 24*v[53]*v[6] - 6*v[53]*v[23] + 36*v[53]*v[21] - 36*v[53]*v[41] - 6*v[53]*v[31] + 18*v[53]*v[30] - 12*v[53]*v[1] + 9*v[53]*pow(v[10], 2) - 18*v[53]*v[10]*v[51] - 30*v[53]*v[10] + 9*v[53]*pow(v[51], 2) + 30*v[53]*v[51] + 6*v[53]*v[13] - 18*v[53]*v[37] + 12*v[53]*v[15] + 4*v[53] - 18*v[54]*v[10] + 18*v[54]*v[51] + 30*v[54] + 9*v[14] - 18*v[44] + 18*v[26]*v[10] - 18*v[26]*v[51] - 30*v[26] + 9*v[48] - 6*v[9] + 18*v[18] - 12*v[50] - pow(v[6], 2) - 6*v[6]*v[21] + 6*v[6]*v[41] + 24*v[6]*v[10] - 24*v[6]*v[51] - 2*v[6]*v[13] + 6*v[6]*v[37] - 4*v[6]*v[15] - 12*v[6] - 24*v[40] + 24*v[12] + 2*v[19] - 6*v[46] + 4*v[3] - 6*v[23]*v[10] + 6*v[23]*v[51] + 13*v[23] + 6*v[5] - 6*v[33] - 6*v[27] + v[7] - 9*pow(v[21], 2) + 18*v[21]*v[41] + 36*v[21]*v[10] - 36*v[21]*v[51] - 6*v[21]*v[13] + 18*v[21]*v[37] - 12*v[21]*v[15] - 12*v[21] - 18*v[8] + 36*v[36] + 6*v[55] - 18*v[24] + 12*v[43] - 9*pow(v[41], 2) - 36*v[41]*v[10] + 36*v[41]*v[51] + 6*v[41]*v[13] - 18*v[41]*v[37] + 12*v[41]*v[15] + 12*v[41] - 18*v[28] - 6*v[2] + 18*v[20] - 12*v[38] - 6*v[31]*v[10] + 6*v[31]*v[51] + 4*v[31] + 18*v[30]*v[10] - 18*v[30]*v[51] - 12*v[30] - 12*v[1]*v[10] + 12*v[1]*v[51] + 8*v[1] - 9*pow(v[10], 2) + 18*v[10]*v[51] + 6*v[10]*v[13] - 18*v[10]*v[37] + 12*v[10]*v[15] + 9*v[35] - 18*v[32] - 6*v[4] + 18*v[22] - 12*v[17] - 9*pow(v[51], 2) - 6*v[51]*v[13] + 18*v[51]*v[37] - 12*v[51]*v[15] + 9*v[45] + 6*v[42] - 18*v[11] + 12*v[49] - pow(v[13], 2) + 6*v[13]*v[37] - 4*v[13]*v[15] + v[25] - 6*v[16] + 4*v[29] - 9*pow(v[37], 2) + 12*v[37]*v[15] + 9*v[52] - 12*v[47] - 4*pow(v[15], 2) + 4*v[34]) / BinEntries);
		//==== Formula Tag: k21 error
			ek21 = sqrt(fabs((pow(v[39], 4)*(-pow(v[39], 2) + v[53]) + 2*pow(v[39], 3)*(-v[6] - v[21] + v[41]) + pow(v[39], 2)*(2*pow(v[53], 2) + 2*v[53]*v[10] - 2*v[53]*v[51] + 2*v[54] - 2*v[26] + v[23] + v[35] - 2*v[32] + v[45]) + 2*v[39]*(-v[53]*v[6] - v[53]*v[21] + v[53]*v[41] - v[6]*v[10] + v[6]*v[51] - v[21]*v[10] + v[21]*v[51] + v[41]*v[10] - v[41]*v[51]) + v[53]*(pow(v[53], 2) + 2*v[53]*v[10] - 2*v[53]*v[51] + pow(v[10], 2) - 2*v[10]*v[51] + pow(v[51], 2)))/pow(v[39], 4)) / BinEntries);
		//==== Formula Tag: k31 error
			ek31 = sqrt(fabs((pow(v[39], 4)*(-16*pow(v[39], 4) - 24*pow(v[39], 3) + 40*pow(v[39], 2)*v[53] + 24*pow(v[39], 2)*v[10] - 24*pow(v[39], 2)*v[51] - 9*pow(v[39], 2) + 42*v[39]*v[53] - 24*v[39]*v[6] - 24*v[39]*v[21] + 24*v[39]*v[41] + 18*v[39]*v[10] - 18*v[39]*v[51] - 9*pow(v[53], 2) - 18*v[53]*v[10] + 18*v[53]*v[51] + 9*v[53] + 42*v[54] - 42*v[26] - 42*v[6] + 17*v[23] - 42*v[21] + 42*v[41] + 8*v[31] - 24*v[30] + 16*v[1] - 9*pow(v[10], 2) + 18*v[10]*v[51] + 9*v[35] - 18*v[32] - 9*pow(v[51], 2) + 9*v[45]) + pow(v[39], 3)*(24*pow(v[53], 2) - 8*v[53]*v[6] - 24*v[53]*v[21] + 24*v[53]*v[41] + 24*v[53]*v[10] - 24*v[53]*v[51] - 8*v[53]*v[13] + 24*v[53]*v[37] - 16*v[53]*v[15] + 54*v[54] - 54*v[26] - 6*v[9] + 18*v[18] - 12*v[50] - 18*v[6] - 24*v[40] + 24*v[12] + 24*v[23] - 6*v[27] - 18*v[21] - 18*v[8] + 36*v[36] + 18*v[41] - 18*v[28] + 6*v[31] - 18*v[30] + 12*v[1] + 18*v[35] - 36*v[32] - 6*v[4] + 18*v[22] - 12*v[17] + 18*v[45] + 6*v[42] - 18*v[11] + 12*v[49]) + pow(v[39], 2)*(18*pow(v[53], 2) - 24*v[53]*v[6] - 36*v[53]*v[21] + 36*v[53]*v[41] + 18*v[53]*v[10] - 18*v[53]*v[51] - 6*v[53]*v[13] + 18*v[53]*v[37] - 12*v[53]*v[15] + 18*v[54] + 9*v[14] - 18*v[44] - 18*v[26] + 9*v[48] - 6*v[9] + 18*v[18] - 12*v[50] + 6*pow(v[6], 2) + 24*v[6]*v[21] - 24*v[6]*v[41] - 18*v[6]*v[10] + 18*v[6]*v[51] + 6*v[6]*v[13] - 18*v[6]*v[37] + 12*v[6]*v[15] - 24*v[40] + 24*v[12] + 2*v[19] - 6*v[46] + 4*v[3] + 9*v[23] + 6*v[5] - 6*v[33] - 6*v[27] + v[7] + 18*pow(v[21], 2) - 36*v[21]*v[41] - 18*v[21]*v[10] + 18*v[21]*v[51] + 6*v[21]*v[13] - 18*v[21]*v[37] + 12*v[21]*v[15] - 18*v[8] + 36*v[36] + 6*v[55] - 18*v[24] + 12*v[43] + 18*pow(v[41], 2) + 18*v[41]*v[10] - 18*v[41]*v[51] - 6*v[41]*v[13] + 18*v[41]*v[37] - 12*v[41]*v[15] - 18*v[28] - 6*v[2] + 18*v[20] - 12*v[38] + 9*v[35] - 18*v[32] - 6*v[4] + 18*v[22] - 12*v[17] + 9*v[45] + 6*v[42] - 18*v[11] + 12*v[49] + v[25] - 6*v[16] + 4*v[29] + 9*v[52] - 12*v[47] + 4*v[34]) + 2*v[39]*(9*v[53]*v[54] - 9*v[53]*v[26] - 9*v[53]*v[6] + 3*v[53]*v[23] - 9*v[53]*v[21] + 9*v[53]*v[41] + 3*v[53]*v[31] - 9*v[53]*v[30] + 6*v[53]*v[1] - 3*v[54]*v[6] - 9*v[54]*v[21] + 9*v[54]*v[41] + 9*v[54]*v[10] - 9*v[54]*v[51] - 3*v[54]*v[13] + 9*v[54]*v[37] - 6*v[54]*v[15] + 3*v[26]*v[6] + 9*v[26]*v[21] - 9*v[26]*v[41] - 9*v[26]*v[10] + 9*v[26]*v[51] + 3*v[26]*v[13] - 9*v[26]*v[37] + 6*v[26]*v[15] + 3*pow(v[6], 2) - v[6]*v[23] + 12*v[6]*v[21] - 12*v[6]*v[41] - v[6]*v[31] + 3*v[6]*v[30] - 2*v[6]*v[1] - 9*v[6]*v[10] + 9*v[6]*v[51] + 3*v[6]*v[13] - 9*v[6]*v[37] + 6*v[6]*v[15] - 3*v[23]*v[21] + 3*v[23]*v[41] + 3*v[23]*v[10] - 3*v[23]*v[51] - v[23]*v[13] + 3*v[23]*v[37] - 2*v[23]*v[15] + 9*pow(v[21], 2) - 18*v[21]*v[41] - 3*v[21]*v[31] + 9*v[21]*v[30] - 6*v[21]*v[1] - 9*v[21]*v[10] + 9*v[21]*v[51] + 3*v[21]*v[13] - 9*v[21]*v[37] + 6*v[21]*v[15] + 9*pow(v[41], 2) + 3*v[41]*v[31] - 9*v[41]*v[30] + 6*v[41]*v[1] + 9*v[41]*v[10] - 9*v[41]*v[51] - 3*v[41]*v[13] + 9*v[41]*v[37] - 6*v[41]*v[15] + 3*v[31]*v[10] - 3*v[31]*v[51] - v[31]*v[13] + 3*v[31]*v[37] - 2*v[31]*v[15] - 9*v[30]*v[10] + 9*v[30]*v[51] + 3*v[30]*v[13] - 9*v[30]*v[37] + 6*v[30]*v[15] + 6*v[1]*v[10] - 6*v[1]*v[51] - 2*v[1]*v[13] + 6*v[1]*v[37] - 4*v[1]*v[15]) + v[53]*(9*pow(v[53], 2) - 6*v[53]*v[6] - 18*v[53]*v[21] + 18*v[53]*v[41] + 18*v[53]*v[10] - 18*v[53]*v[51] - 6*v[53]*v[13] + 18*v[53]*v[37] - 12*v[53]*v[15] + pow(v[6], 2) + 6*v[6]*v[21] - 6*v[6]*v[41] - 6*v[6]*v[10] + 6*v[6]*v[51] + 2*v[6]*v[13] - 6*v[6]*v[37] + 4*v[6]*v[15] + 9*pow(v[21], 2) - 18*v[21]*v[41] - 18*v[21]*v[10] + 18*v[21]*v[51] + 6*v[21]*v[13] - 18*v[21]*v[37] + 12*v[21]*v[15] + 9*pow(v[41], 2) + 18*v[41]*v[10] - 18*v[41]*v[51] - 6*v[41]*v[13] + 18*v[41]*v[37] - 12*v[41]*v[15] + 9*pow(v[10], 2) - 18*v[10]*v[51] - 6*v[10]*v[13] + 18*v[10]*v[37] - 12*v[10]*v[15] + 9*pow(v[51], 2) + 6*v[51]*v[13] - 18*v[51]*v[37] + 12*v[51]*v[15] + pow(v[13], 2) - 6*v[13]*v[37] + 4*v[13]*v[15] + 9*pow(v[37], 2) - 12*v[37]*v[15] + 4*pow(v[15], 2)))/pow(v[39], 4)) / BinEntries);
		//==== Formula Tag: k2n error
			ek2n = sqrt(fabs((-pow(v[39], 4) + 2*pow(v[39], 3)*(v[53] + v[10] - v[51]) + pow(v[39], 2)*(-pow(v[53], 2) - 2*v[53]*v[10] + 2*v[53]*v[51] + v[53] + 2*v[54] - 2*v[26] + 2*v[6] + v[23] + 2*v[21] - 2*v[41] - pow(v[10], 2) + 2*v[10]*v[51] + v[35] - 2*v[32] - pow(v[51], 2) + v[45]) + 4*v[39]*(-pow(v[53], 2) - v[53]*v[6] - v[53]*v[21] + v[53]*v[41] - v[53]*v[10] + v[53]*v[51] - v[6]*v[10] + v[6]*v[51] - v[21]*v[10] + v[21]*v[51] + v[41]*v[10] - v[41]*v[51]) + 4*v[53]*(pow(v[53], 2) + 2*v[53]*v[10] - 2*v[53]*v[51] + pow(v[10], 2) - 2*v[10]*v[51] + pow(v[51], 2)))/pow(v[39], 6)) / BinEntries);
		//==== Formula Tag: k31 error
			ek3n = sqrt(fabs((-9*pow(v[39], 6) + pow(v[39], 5)*(18*v[53] + 18*v[10] - 18*v[51] - 24) + pow(v[39], 4)*(-9*pow(v[53], 2) - 18*v[53]*v[10] + 18*v[53]*v[51] + 69*v[53] + 18*v[54] - 18*v[26] + 6*v[6] + 9*v[23] - 18*v[21] + 18*v[41] - 9*pow(v[10], 2) + 18*v[10]*v[51] + 60*v[10] + 9*v[35] - 18*v[32] - 9*pow(v[51], 2) - 60*v[51] + 9*v[45] - 12*v[13] + 36*v[37] - 24*v[15] - 16) + pow(v[39], 3)*(-72*pow(v[53], 2) - 24*v[53]*v[6] - 108*v[53]*v[10] + 108*v[53]*v[51] + 12*v[53]*v[13] - 36*v[53]*v[37] + 24*v[53]*v[15] + 72*v[53] + 18*v[54] - 18*v[26] - 6*v[9] + 18*v[18] - 12*v[50] - 24*v[6]*v[10] + 24*v[6]*v[51] + 26*v[6] - 24*v[40] + 24*v[12] + 12*v[23] - 6*v[27] - 6*v[21] - 18*v[8] + 36*v[36] + 6*v[41] - 18*v[28] - 6*v[31] + 18*v[30] - 12*v[1] - 36*pow(v[10], 2) + 72*v[10]*v[51] + 12*v[10]*v[13] - 36*v[10]*v[37] + 24*v[10]*v[15] + 48*v[10] + 18*v[35] - 36*v[32] - 6*v[4] + 18*v[22] - 12*v[17] - 36*pow(v[51], 2) - 12*v[51]*v[13] + 36*v[51]*v[37] - 24*v[51]*v[15] - 48*v[51] + 18*v[45] + 6*v[42] - 18*v[11] + 12*v[49] - 16*v[13] + 48*v[37] - 32*v[15]) + pow(v[39], 2)*(36*pow(v[53], 3) + 72*pow(v[53], 2)*v[10] - 72*pow(v[53], 2)*v[51] - 138*pow(v[53], 2) + 36*v[53]*v[54] - 36*v[53]*v[26] - 48*v[53]*v[6] + 12*v[53]*v[23] + 36*v[53]*v[21] - 36*v[53]*v[41] + 12*v[53]*v[31] - 36*v[53]*v[30] + 24*v[53]*v[1] + 36*v[53]*pow(v[10], 2) - 72*v[53]*v[10]*v[51] - 174*v[53]*v[10] + 36*v[53]*pow(v[51], 2) + 174*v[53]*v[51] + 42*v[53]*v[13] - 126*v[53]*v[37] + 84*v[53]*v[15] + 16*v[53] + 36*v[54]*v[10] - 36*v[54]*v[51] - 6*v[54] + 9*v[14] - 18*v[44] - 36*v[26]*v[10] + 36*v[26]*v[51] + 6*v[26] + 9*v[48] - 6*v[9] + 18*v[18] - 12*v[50] + 14*pow(v[6], 2) + 48*v[6]*v[21] - 48*v[6]*v[41] - 66*v[6]*v[10] + 66*v[6]*v[51] + 10*v[6]*v[13] - 30*v[6]*v[37] + 20*v[6]*v[15] + 24*v[6] - 24*v[40] + 24*v[12] + 2*v[19] - 6*v[46] + 4*v[3] + 12*v[23]*v[10] - 12*v[23]*v[51] + v[23] + 6*v[5] - 6*v[33] - 6*v[27] + v[7] + 18*pow(v[21], 2) - 36*v[21]*v[41] - 18*v[21]*v[10] + 18*v[21]*v[51] - 6*v[21]*v[13] + 18*v[21]*v[37] - 12*v[21]*v[15] + 24*v[21] - 18*v[8] + 36*v[36] + 6*v[55] - 18*v[24] + 12*v[43] + 18*pow(v[41], 2) + 18*v[41]*v[10] - 18*v[41]*v[51] + 6*v[41]*v[13] - 18*v[41]*v[37] + 12*v[41]*v[15] - 24*v[41] - 18*v[28] - 6*v[2] + 18*v[20] - 12*v[38] + 12*v[31]*v[10] - 12*v[31]*v[51] - 8*v[31] - 36*v[30]*v[10] + 36*v[30]*v[51] + 24*v[30] + 24*v[1]*v[10] - 24*v[1]*v[51] - 16*v[1] - 36*pow(v[10], 2) + 72*v[10]*v[51] + 24*v[10]*v[13] - 72*v[10]*v[37] + 48*v[10]*v[15] + 9*v[35] - 18*v[32] - 6*v[4] + 18*v[22] - 12*v[17] - 36*pow(v[51], 2) - 24*v[51]*v[13] + 72*v[51]*v[37] - 48*v[51]*v[15] + 9*v[45] + 6*v[42] - 18*v[11] + 12*v[49] - 4*pow(v[13], 2) + 24*v[13]*v[37] - 16*v[13]*v[15] + v[25] - 6*v[16] + 4*v[29] - 36*pow(v[37], 2) + 48*v[37]*v[15] + 9*v[52] - 12*v[47] - 16*pow(v[15], 2) + 4*v[34]) + 6*v[39]*(18*pow(v[53], 3) - 6*pow(v[53], 2)*v[6] - 18*pow(v[53], 2)*v[21] + 18*pow(v[53], 2)*v[41] + 36*pow(v[53], 2)*v[10] - 36*pow(v[53], 2)*v[51] - 6*pow(v[53], 2)*v[13] + 18*pow(v[53], 2)*v[37] - 12*pow(v[53], 2)*v[15] - 12*pow(v[53], 2) + 9*v[53]*v[54] - 9*v[53]*v[26] - 6*v[53]*v[6]*v[10] + 6*v[53]*v[6]*v[51] - 5*v[53]*v[6] + 3*v[53]*v[23] - 18*v[53]*v[21]*v[10] + 18*v[53]*v[21]*v[51] + 3*v[53]*v[21] + 18*v[53]*v[41]*v[10] - 18*v[53]*v[41]*v[51] - 3*v[53]*v[41] + 3*v[53]*v[31] - 9*v[53]*v[30] + 6*v[53]*v[1] + 18*v[53]*pow(v[10], 2) - 36*v[53]*v[10]*v[51] - 6*v[53]*v[10]*v[13] + 18*v[53]*v[10]*v[37] - 12*v[53]*v[10]*v[15] - 12*v[53]*v[10] + 18*v[53]*pow(v[51], 2) + 6*v[53]*v[51]*v[13] - 18*v[53]*v[51]*v[37] + 12*v[53]*v[51]*v[15] + 12*v[53]*v[51] + 4*v[53]*v[13] - 12*v[53]*v[37] + 8*v[53]*v[15] - 3*v[54]*v[6] - 9*v[54]*v[21] + 9*v[54]*v[41] + 9*v[54]*v[10] - 9*v[54]*v[51] - 3*v[54]*v[13] + 9*v[54]*v[37] - 6*v[54]*v[15] + 3*v[26]*v[6] + 9*v[26]*v[21] - 9*v[26]*v[41] - 9*v[26]*v[10] + 9*v[26]*v[51] + 3*v[26]*v[13] - 9*v[26]*v[37] + 6*v[26]*v[15] + 3*pow(v[6], 2) - v[6]*v[23] + 12*v[6]*v[21] - 12*v[6]*v[41] - v[6]*v[31] + 3*v[6]*v[30] - 2*v[6]*v[1] - 9*v[6]*v[10] + 9*v[6]*v[51] + 3*v[6]*v[13] - 9*v[6]*v[37] + 6*v[6]*v[15] - 3*v[23]*v[21] + 3*v[23]*v[41] + 3*v[23]*v[10] - 3*v[23]*v[51] - v[23]*v[13] + 3*v[23]*v[37] - 2*v[23]*v[15] + 9*pow(v[21], 2) - 18*v[21]*v[41] - 3*v[21]*v[31] + 9*v[21]*v[30] - 6*v[21]*v[1] - 9*v[21]*v[10] + 9*v[21]*v[51] + 3*v[21]*v[13] - 9*v[21]*v[37] + 6*v[21]*v[15] + 9*pow(v[41], 2) + 3*v[41]*v[31] - 9*v[41]*v[30] + 6*v[41]*v[1] + 9*v[41]*v[10] - 9*v[41]*v[51] - 3*v[41]*v[13] + 9*v[41]*v[37] - 6*v[41]*v[15] + 3*v[31]*v[10] - 3*v[31]*v[51] - v[31]*v[13] + 3*v[31]*v[37] - 2*v[31]*v[15] - 9*v[30]*v[10] + 9*v[30]*v[51] + 3*v[30]*v[13] - 9*v[30]*v[37] + 6*v[30]*v[15] + 6*v[1]*v[10] - 6*v[1]*v[51] - 2*v[1]*v[13] + 6*v[1]*v[37] - 4*v[1]*v[15]) + 9*v[53]*(9*pow(v[53], 2) - 6*v[53]*v[6] - 18*v[53]*v[21] + 18*v[53]*v[41] + 18*v[53]*v[10] - 18*v[53]*v[51] - 6*v[53]*v[13] + 18*v[53]*v[37] - 12*v[53]*v[15] + pow(v[6], 2) + 6*v[6]*v[21] - 6*v[6]*v[41] - 6*v[6]*v[10] + 6*v[6]*v[51] + 2*v[6]*v[13] - 6*v[6]*v[37] + 4*v[6]*v[15] + 9*pow(v[21], 2) - 18*v[21]*v[41] - 18*v[21]*v[10] + 18*v[21]*v[51] + 6*v[21]*v[13] - 18*v[21]*v[37] + 12*v[21]*v[15] + 9*pow(v[41], 2) + 18*v[41]*v[10] - 18*v[41]*v[51] - 6*v[41]*v[13] + 18*v[41]*v[37] - 12*v[41]*v[15] + 9*pow(v[10], 2) - 18*v[10]*v[51] - 6*v[10]*v[13] + 18*v[10]*v[37] - 12*v[10]*v[15] + 9*pow(v[51], 2) + 6*v[51]*v[13] - 18*v[51]*v[37] + 12*v[51]*v[15] + pow(v[13], 2) - 6*v[13]*v[37] + 4*v[13]*v[15] + 9*pow(v[37], 2) - 12*v[37]*v[15] + 4*pow(v[15], 2)))/pow(v[39], 8)) / BinEntries);
    	//========================

		//error calculation ends
		if(BinEntries < 1) {
			tc1 = tc2 = tc3 = 0; 
			tk1 = tk2 = tk3 = 0; 
			ek1 = ek2 = ek3 = 0; 
			ek21 = ek31 = 0;
			ek2n = ek3n = 0;
		}

		_sk1->SetBinContent(iBin, NonNan(tc1));
		_sk1->SetBinError(iBin, NonNan(ek1));
		_sk2->SetBinContent(iBin, NonNan(tc2));
		_sk2->SetBinError(iBin, NonNan(ek2));
		_sk3->SetBinContent(iBin, NonNan(tc3));
		_sk3->SetBinError(iBin, NonNan(ek3));

		if (tk1 != 0) {
			_sk21->SetBinContent(iBin, NonNan(tk2/tk1));
			_sk21->SetBinError(iBin, NonNan(ek21));

			_sk31->SetBinContent(iBin, NonNan(tk3/tk1));
			_sk31->SetBinError(iBin, NonNan(ek31));

			_sk2n->SetBinContent(iBin, NonNan(tk2/tk1/tk1));
			_sk2n->SetBinError(iBin, NonNan(ek2n));

			_sk3n->SetBinContent(iBin, NonNan(tk3/tk1/tk1/tk1));
			_sk3n->SetBinError(iBin, NonNan(ek3n));
		} else {
			_sk21->SetBinContent(iBin, 0);
			_sk21->SetBinError(iBin, NonNan(ek21));

			_sk31->SetBinContent(iBin, 0);
			_sk31->SetBinError(iBin, NonNan(ek31));

			_sk2n->SetBinContent(iBin, 0);
			_sk2n->SetBinError(iBin, NonNan(ek2n));

			_sk3n->SetBinContent(iBin, 0);
			_sk3n->SetBinError(iBin, NonNan(ek3n));
		}

  	} // mult bin loop ends
}

void ECorr::Save(const char *OutName) {

	TFile *out = new TFile(OutName, "recreate");
	out->cd();

	_sk1->Write();
	_sk2->Write();
	_sk3->Write();
	_sk21->Write();
	_sk31->Write();
	_sk2n->Write();
	_sk3n->Write();

	hEntries->Write();
	out->Close();
}

void ECorr::Update(const char* OutName) {

	TFile *out = new TFile(OutName, "update");
	out->cd();

	_sk1->Write();
	_sk2->Write();
	_sk3->Write();
	_sk21->Write();
	_sk31->Write();
	_sk2n->Write();
	_sk3n->Write();

	hEntries->Write();
  	out->Close();
}

void ECorr::ReadTerms(const char *FileName) {
	TFile *inf = new TFile(FileName);
	std::map<const char*, TProfile*>::iterator iter;
	TIter nextkey(inf->GetListOfKeys());
	TKey *key;
	while((key = (TKey*)nextkey())) {
		TString strName = key->ReadObj()->GetName();
		if(strName.Contains(ParticleType)) {
			strName.Replace(0, strlen(ParticleType)+1, "");
			int iT = 0;
			while (true) {
				if(strcmp(strName, Terms[iT])==0) {
					_V[iT+1] = (TProfile*) key->ReadObj()->Clone();
					break;
				} else { iT++; }
			}
		}
	}
	TProfile* ent = (TProfile*)inf->Get(Form("%s_q01_01", ParticleType));
	for(int i=1; i<ent->GetNbinsX(); ++i) {
		hEntries->SetBinContent(i, ent->GetBinEntries(i));
	}
}